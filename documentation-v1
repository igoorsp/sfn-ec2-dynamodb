Documentação Técnica da Aplicação Camel
Visão Geral
Esta documentação descreve a arquitetura e o funcionamento de uma aplicação desenvolvida em Apache Camel que expõe três endpoints RESTful para interagir com uma tabela do Amazon DynamoDB e com o AWS Step Functions. A aplicação permite recuperar, criar e atualizar registros de taskToken no DynamoDB, além de enviar notificações de sucesso ou falha para o Step Functions.

Arquitetura da Solução
A arquitetura da solução é composta pelos seguintes componentes:

Aplicação Camel: Responsável por expor os endpoints RESTful e realizar as operações no DynamoDB e Step Functions.

Amazon DynamoDB: Armazena os registros de taskToken com os seguintes atributos: businessKey, executionStartTime, executionId, taskToken e status.

AWS Step Functions: Gerencia o fluxo de trabalho (workflow) e recebe notificações de sucesso ou falha através do taskToken.

Endpoints da Aplicação
1. GET /tasks
Descrição: Recupera informações de uma taskToken da tabela do DynamoDB com base no status fornecido.

Parâmetros de Consulta:

status (obrigatório): Filtra os registros pelo status (PENDING, APPROVED, REJECTED).

Resposta:

Código HTTP: 200 OK

Corpo da Resposta:

json
Copy
[
  {
    "businessKey": "string",
    "executionStartTime": "string",
    "executionId": "string",
    "taskToken": "string",
    "status": "string"
  }
]
2. PUT /tasks
Descrição: Cria um novo registro na tabela do DynamoDB com os parâmetros fornecidos.

Corpo da Requisição:

json
Copy
{
  "businessKey": "string",
  "executionStartTime": "string",
  "executionId": "string",
  "taskToken": "string",
  "status": "string"
}
Resposta:

Código HTTP: 201 Created

Corpo da Resposta:

json
Copy
{
  "message": "Registro criado com sucesso."
}
3. POST /tasks/{taskToken}
Descrição: Envia uma notificação de sucesso ou falha para o AWS Step Functions e atualiza o status na tabela do DynamoDB.

Parâmetros de Caminho:

taskToken (obrigatório): O token da tarefa a ser atualizada.

Corpo da Requisição:

json
Copy
{
  "status": "string"
}
Resposta:

Código HTTP: 200 OK

Corpo da Resposta:

json
Copy
{
  "message": "Status atualizado com sucesso."
}
Fluxo de Trabalho
Recuperação de Tarefas Pendentes:

O cliente faz uma requisição GET /tasks com o status PENDING para obter uma lista de tarefas pendentes.

Seleção e Atualização de Tarefa:

O cliente seleciona uma taskToken da lista e faz uma requisição POST /tasks/{taskToken} para atualizar o status da tarefa e notificar o Step Functions.

Criação de Nova Tarefa:

O cliente faz uma requisição PUT /tasks para criar um novo registro de taskToken no DynamoDB.

Contrato OpenAPI 3.0
yaml
Copy
openapi: 3.0.0
info:
  title: API de Gerenciamento de TaskToken
  version: 1.0.0
  description: API para gerenciamento de taskToken no DynamoDB e Step Functions.
servers:
  - url: http://localhost:8080
    description: Servidor de Desenvolvimento
paths:
  /tasks:
    get:
      summary: Recupera taskTokens por status
      parameters:
        - name: status
          in: query
          required: true
          schema:
            type: string
            enum: [PENDING, APPROVED, REJECTED]
      responses:
        '200':
          description: Lista de taskTokens
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskToken'
    put:
      summary: Cria um novo registro de taskToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskToken'
      responses:
        '201':
          description: Registro criado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /tasks/{taskToken}:
    post:
      summary: Atualiza o status de uma taskToken
      parameters:
        - name: taskToken
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [PENDING, APPROVED, REJECTED]
      responses:
        '200':
          description: Status atualizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
components:
  schemas:
    TaskToken:
      type: object
      properties:
        businessKey:
          type: string
        executionStartTime:
          type: string
        executionId:
          type: string
        taskToken:
          type: string
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED]
      required:
        - businessKey
        - executionStartTime
        - executionId
        - taskToken
        - status
Considerações Finais
Esta documentação fornece uma visão detalhada da arquitetura e funcionamento da aplicação Camel, além de um contrato OpenAPI 3.0 para facilitar a integração e o consumo dos endpoints. Para qualquer dúvida ou sugestão, entre em contato com a equipe de desenvolvimento.

